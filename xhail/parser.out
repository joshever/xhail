Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    IMPLIES

Grammar

Rule 0     S' -> program
Rule 1     program -> program clause
Rule 2     program -> clause
Rule 3     clause -> example
Rule 4     clause -> modeb
Rule 5     clause -> modeh
Rule 6     atom -> PREDICATE LPAREN terms RPAREN
Rule 7     schema -> PREDICATE LPAREN schema_terms RPAREN
Rule 8     schema_terms -> MARKER TERM
Rule 9     schema_terms -> MARKER TERM COMMA schema_terms
Rule 10    schema_terms -> schema
Rule 11    schema_terms -> schema COMMA schema_terms
Rule 12    example -> EXAMPLE_KEY atom DOT
Rule 13    example -> EXAMPLE_KEY NOT atom DOT
Rule 14    modeh -> MODEH_KEY schema DOT
Rule 15    modeb -> MODEB_KEY schema DOT
Rule 16    modeb -> MODEB_KEY NOT schema DOT
Rule 17    terms -> TERM
Rule 18    terms -> atom
Rule 19    terms -> TERM COMMA terms
Rule 20    terms -> atom COMMA terms

Terminals, with rules where they appear

COMMA                : 9 11 19 20
DOT                  : 12 13 14 15 16
EXAMPLE_KEY          : 12 13
IMPLIES              : 
LPAREN               : 6 7
MARKER               : 8 9
MODEB_KEY            : 15 16
MODEH_KEY            : 14
NOT                  : 13 16
PREDICATE            : 6 7
RPAREN               : 6 7
TERM                 : 8 9 17 19
error                : 

Nonterminals, with rules where they appear

atom                 : 12 13 18 20
clause               : 1 2
example              : 3
modeb                : 4
modeh                : 5
program              : 1 0
schema               : 10 11 14 15 16
schema_terms         : 7 9 11
terms                : 6 19 20

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program clause
    (2) program -> . clause
    (3) clause -> . example
    (4) clause -> . modeb
    (5) clause -> . modeh
    (12) example -> . EXAMPLE_KEY atom DOT
    (13) example -> . EXAMPLE_KEY NOT atom DOT
    (15) modeb -> . MODEB_KEY schema DOT
    (16) modeb -> . MODEB_KEY NOT schema DOT
    (14) modeh -> . MODEH_KEY schema DOT

    EXAMPLE_KEY     shift and go to state 6
    MODEB_KEY       shift and go to state 7
    MODEH_KEY       shift and go to state 8

    program                        shift and go to state 1
    clause                         shift and go to state 2
    example                        shift and go to state 3
    modeb                          shift and go to state 4
    modeh                          shift and go to state 5

state 1

    (0) S' -> program .
    (1) program -> program . clause
    (3) clause -> . example
    (4) clause -> . modeb
    (5) clause -> . modeh
    (12) example -> . EXAMPLE_KEY atom DOT
    (13) example -> . EXAMPLE_KEY NOT atom DOT
    (15) modeb -> . MODEB_KEY schema DOT
    (16) modeb -> . MODEB_KEY NOT schema DOT
    (14) modeh -> . MODEH_KEY schema DOT

    EXAMPLE_KEY     shift and go to state 6
    MODEB_KEY       shift and go to state 7
    MODEH_KEY       shift and go to state 8

    clause                         shift and go to state 9
    example                        shift and go to state 3
    modeb                          shift and go to state 4
    modeh                          shift and go to state 5

state 2

    (2) program -> clause .

    EXAMPLE_KEY     reduce using rule 2 (program -> clause .)
    MODEB_KEY       reduce using rule 2 (program -> clause .)
    MODEH_KEY       reduce using rule 2 (program -> clause .)
    $end            reduce using rule 2 (program -> clause .)


state 3

    (3) clause -> example .

    EXAMPLE_KEY     reduce using rule 3 (clause -> example .)
    MODEB_KEY       reduce using rule 3 (clause -> example .)
    MODEH_KEY       reduce using rule 3 (clause -> example .)
    $end            reduce using rule 3 (clause -> example .)


state 4

    (4) clause -> modeb .

    EXAMPLE_KEY     reduce using rule 4 (clause -> modeb .)
    MODEB_KEY       reduce using rule 4 (clause -> modeb .)
    MODEH_KEY       reduce using rule 4 (clause -> modeb .)
    $end            reduce using rule 4 (clause -> modeb .)


state 5

    (5) clause -> modeh .

    EXAMPLE_KEY     reduce using rule 5 (clause -> modeh .)
    MODEB_KEY       reduce using rule 5 (clause -> modeh .)
    MODEH_KEY       reduce using rule 5 (clause -> modeh .)
    $end            reduce using rule 5 (clause -> modeh .)


state 6

    (12) example -> EXAMPLE_KEY . atom DOT
    (13) example -> EXAMPLE_KEY . NOT atom DOT
    (6) atom -> . PREDICATE LPAREN terms RPAREN

    NOT             shift and go to state 11
    PREDICATE       shift and go to state 12

    atom                           shift and go to state 10

state 7

    (15) modeb -> MODEB_KEY . schema DOT
    (16) modeb -> MODEB_KEY . NOT schema DOT
    (7) schema -> . PREDICATE LPAREN schema_terms RPAREN

    NOT             shift and go to state 14
    PREDICATE       shift and go to state 15

    schema                         shift and go to state 13

state 8

    (14) modeh -> MODEH_KEY . schema DOT
    (7) schema -> . PREDICATE LPAREN schema_terms RPAREN

    PREDICATE       shift and go to state 15

    schema                         shift and go to state 16

state 9

    (1) program -> program clause .

    EXAMPLE_KEY     reduce using rule 1 (program -> program clause .)
    MODEB_KEY       reduce using rule 1 (program -> program clause .)
    MODEH_KEY       reduce using rule 1 (program -> program clause .)
    $end            reduce using rule 1 (program -> program clause .)


state 10

    (12) example -> EXAMPLE_KEY atom . DOT

    DOT             shift and go to state 17


state 11

    (13) example -> EXAMPLE_KEY NOT . atom DOT
    (6) atom -> . PREDICATE LPAREN terms RPAREN

    PREDICATE       shift and go to state 12

    atom                           shift and go to state 18

state 12

    (6) atom -> PREDICATE . LPAREN terms RPAREN

    LPAREN          shift and go to state 19


state 13

    (15) modeb -> MODEB_KEY schema . DOT

    DOT             shift and go to state 20


state 14

    (16) modeb -> MODEB_KEY NOT . schema DOT
    (7) schema -> . PREDICATE LPAREN schema_terms RPAREN

    PREDICATE       shift and go to state 15

    schema                         shift and go to state 21

state 15

    (7) schema -> PREDICATE . LPAREN schema_terms RPAREN

    LPAREN          shift and go to state 22


state 16

    (14) modeh -> MODEH_KEY schema . DOT

    DOT             shift and go to state 23


state 17

    (12) example -> EXAMPLE_KEY atom DOT .

    EXAMPLE_KEY     reduce using rule 12 (example -> EXAMPLE_KEY atom DOT .)
    MODEB_KEY       reduce using rule 12 (example -> EXAMPLE_KEY atom DOT .)
    MODEH_KEY       reduce using rule 12 (example -> EXAMPLE_KEY atom DOT .)
    $end            reduce using rule 12 (example -> EXAMPLE_KEY atom DOT .)


state 18

    (13) example -> EXAMPLE_KEY NOT atom . DOT

    DOT             shift and go to state 24


state 19

    (6) atom -> PREDICATE LPAREN . terms RPAREN
    (17) terms -> . TERM
    (18) terms -> . atom
    (19) terms -> . TERM COMMA terms
    (20) terms -> . atom COMMA terms
    (6) atom -> . PREDICATE LPAREN terms RPAREN

    TERM            shift and go to state 26
    PREDICATE       shift and go to state 12

    terms                          shift and go to state 25
    atom                           shift and go to state 27

state 20

    (15) modeb -> MODEB_KEY schema DOT .

    EXAMPLE_KEY     reduce using rule 15 (modeb -> MODEB_KEY schema DOT .)
    MODEB_KEY       reduce using rule 15 (modeb -> MODEB_KEY schema DOT .)
    MODEH_KEY       reduce using rule 15 (modeb -> MODEB_KEY schema DOT .)
    $end            reduce using rule 15 (modeb -> MODEB_KEY schema DOT .)


state 21

    (16) modeb -> MODEB_KEY NOT schema . DOT

    DOT             shift and go to state 28


state 22

    (7) schema -> PREDICATE LPAREN . schema_terms RPAREN
    (8) schema_terms -> . MARKER TERM
    (9) schema_terms -> . MARKER TERM COMMA schema_terms
    (10) schema_terms -> . schema
    (11) schema_terms -> . schema COMMA schema_terms
    (7) schema -> . PREDICATE LPAREN schema_terms RPAREN

    MARKER          shift and go to state 30
    PREDICATE       shift and go to state 15

    schema_terms                   shift and go to state 29
    schema                         shift and go to state 31

state 23

    (14) modeh -> MODEH_KEY schema DOT .

    EXAMPLE_KEY     reduce using rule 14 (modeh -> MODEH_KEY schema DOT .)
    MODEB_KEY       reduce using rule 14 (modeh -> MODEH_KEY schema DOT .)
    MODEH_KEY       reduce using rule 14 (modeh -> MODEH_KEY schema DOT .)
    $end            reduce using rule 14 (modeh -> MODEH_KEY schema DOT .)


state 24

    (13) example -> EXAMPLE_KEY NOT atom DOT .

    EXAMPLE_KEY     reduce using rule 13 (example -> EXAMPLE_KEY NOT atom DOT .)
    MODEB_KEY       reduce using rule 13 (example -> EXAMPLE_KEY NOT atom DOT .)
    MODEH_KEY       reduce using rule 13 (example -> EXAMPLE_KEY NOT atom DOT .)
    $end            reduce using rule 13 (example -> EXAMPLE_KEY NOT atom DOT .)


state 25

    (6) atom -> PREDICATE LPAREN terms . RPAREN

    RPAREN          shift and go to state 32


state 26

    (17) terms -> TERM .
    (19) terms -> TERM . COMMA terms

    RPAREN          reduce using rule 17 (terms -> TERM .)
    COMMA           shift and go to state 33


state 27

    (18) terms -> atom .
    (20) terms -> atom . COMMA terms

    RPAREN          reduce using rule 18 (terms -> atom .)
    COMMA           shift and go to state 34


state 28

    (16) modeb -> MODEB_KEY NOT schema DOT .

    EXAMPLE_KEY     reduce using rule 16 (modeb -> MODEB_KEY NOT schema DOT .)
    MODEB_KEY       reduce using rule 16 (modeb -> MODEB_KEY NOT schema DOT .)
    MODEH_KEY       reduce using rule 16 (modeb -> MODEB_KEY NOT schema DOT .)
    $end            reduce using rule 16 (modeb -> MODEB_KEY NOT schema DOT .)


state 29

    (7) schema -> PREDICATE LPAREN schema_terms . RPAREN

    RPAREN          shift and go to state 35


state 30

    (8) schema_terms -> MARKER . TERM
    (9) schema_terms -> MARKER . TERM COMMA schema_terms

    TERM            shift and go to state 36


state 31

    (10) schema_terms -> schema .
    (11) schema_terms -> schema . COMMA schema_terms

    RPAREN          reduce using rule 10 (schema_terms -> schema .)
    COMMA           shift and go to state 37


state 32

    (6) atom -> PREDICATE LPAREN terms RPAREN .

    DOT             reduce using rule 6 (atom -> PREDICATE LPAREN terms RPAREN .)
    COMMA           reduce using rule 6 (atom -> PREDICATE LPAREN terms RPAREN .)
    RPAREN          reduce using rule 6 (atom -> PREDICATE LPAREN terms RPAREN .)


state 33

    (19) terms -> TERM COMMA . terms
    (17) terms -> . TERM
    (18) terms -> . atom
    (19) terms -> . TERM COMMA terms
    (20) terms -> . atom COMMA terms
    (6) atom -> . PREDICATE LPAREN terms RPAREN

    TERM            shift and go to state 26
    PREDICATE       shift and go to state 12

    terms                          shift and go to state 38
    atom                           shift and go to state 27

state 34

    (20) terms -> atom COMMA . terms
    (17) terms -> . TERM
    (18) terms -> . atom
    (19) terms -> . TERM COMMA terms
    (20) terms -> . atom COMMA terms
    (6) atom -> . PREDICATE LPAREN terms RPAREN

    TERM            shift and go to state 26
    PREDICATE       shift and go to state 12

    atom                           shift and go to state 27
    terms                          shift and go to state 39

state 35

    (7) schema -> PREDICATE LPAREN schema_terms RPAREN .

    DOT             reduce using rule 7 (schema -> PREDICATE LPAREN schema_terms RPAREN .)
    COMMA           reduce using rule 7 (schema -> PREDICATE LPAREN schema_terms RPAREN .)
    RPAREN          reduce using rule 7 (schema -> PREDICATE LPAREN schema_terms RPAREN .)


state 36

    (8) schema_terms -> MARKER TERM .
    (9) schema_terms -> MARKER TERM . COMMA schema_terms

    RPAREN          reduce using rule 8 (schema_terms -> MARKER TERM .)
    COMMA           shift and go to state 40


state 37

    (11) schema_terms -> schema COMMA . schema_terms
    (8) schema_terms -> . MARKER TERM
    (9) schema_terms -> . MARKER TERM COMMA schema_terms
    (10) schema_terms -> . schema
    (11) schema_terms -> . schema COMMA schema_terms
    (7) schema -> . PREDICATE LPAREN schema_terms RPAREN

    MARKER          shift and go to state 30
    PREDICATE       shift and go to state 15

    schema                         shift and go to state 31
    schema_terms                   shift and go to state 41

state 38

    (19) terms -> TERM COMMA terms .

    RPAREN          reduce using rule 19 (terms -> TERM COMMA terms .)


state 39

    (20) terms -> atom COMMA terms .

    RPAREN          reduce using rule 20 (terms -> atom COMMA terms .)


state 40

    (9) schema_terms -> MARKER TERM COMMA . schema_terms
    (8) schema_terms -> . MARKER TERM
    (9) schema_terms -> . MARKER TERM COMMA schema_terms
    (10) schema_terms -> . schema
    (11) schema_terms -> . schema COMMA schema_terms
    (7) schema -> . PREDICATE LPAREN schema_terms RPAREN

    MARKER          shift and go to state 30
    PREDICATE       shift and go to state 15

    schema_terms                   shift and go to state 42
    schema                         shift and go to state 31

state 41

    (11) schema_terms -> schema COMMA schema_terms .

    RPAREN          reduce using rule 11 (schema_terms -> schema COMMA schema_terms .)


state 42

    (9) schema_terms -> MARKER TERM COMMA schema_terms .

    RPAREN          reduce using rule 9 (schema_terms -> MARKER TERM COMMA schema_terms .)


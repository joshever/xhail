
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programCOMMA DOT EXAMPLE_KEY IMPLIES LPAREN MARKER MODEB_KEY MODEH_KEY NOT PREDICATE RPAREN TERMprogram : program clause\n               | clauseclause : example\n              | modeb\n              | modeh\n    atom : PREDICATE LPAREN terms RPARENschema : PREDICATE LPAREN schema_terms RPARENschema_terms : MARKER TERM\n                    | MARKER TERM COMMA schema_terms\n                    | schema\n                    | schema COMMA schema_terms\n    example : EXAMPLE_KEY atom DOT\n               | EXAMPLE_KEY NOT atom DOT\n    modeh : MODEH_KEY schema DOTmodeb : MODEB_KEY schema DOT\n             | MODEB_KEY NOT schema DOT\n             terms : TERM\n             | atom\n             | TERM COMMA terms\n             | atom COMMA terms\n    '
    
_lr_action_items = {'EXAMPLE_KEY':([0,1,2,3,4,5,9,17,20,23,24,28,],[6,6,-2,-3,-4,-5,-1,-12,-15,-14,-13,-16,]),'MODEB_KEY':([0,1,2,3,4,5,9,17,20,23,24,28,],[7,7,-2,-3,-4,-5,-1,-12,-15,-14,-13,-16,]),'MODEH_KEY':([0,1,2,3,4,5,9,17,20,23,24,28,],[8,8,-2,-3,-4,-5,-1,-12,-15,-14,-13,-16,]),'$end':([1,2,3,4,5,9,17,20,23,24,28,],[0,-2,-3,-4,-5,-1,-12,-15,-14,-13,-16,]),'NOT':([6,7,],[11,14,]),'PREDICATE':([6,7,8,11,14,19,22,33,34,37,40,],[12,15,15,12,15,12,15,12,12,15,15,]),'DOT':([10,13,16,18,21,32,35,],[17,20,23,24,28,-6,-7,]),'LPAREN':([12,15,],[19,22,]),'TERM':([19,30,33,34,],[26,36,26,26,]),'MARKER':([22,37,40,],[30,30,30,]),'RPAREN':([25,26,27,29,31,32,35,36,38,39,41,42,],[32,-17,-18,35,-10,-6,-7,-8,-19,-20,-11,-9,]),'COMMA':([26,27,31,32,35,36,],[33,34,37,-6,-7,40,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'clause':([0,1,],[2,9,]),'example':([0,1,],[3,3,]),'modeb':([0,1,],[4,4,]),'modeh':([0,1,],[5,5,]),'atom':([6,11,19,33,34,],[10,18,27,27,27,]),'schema':([7,8,14,22,37,40,],[13,16,21,31,31,31,]),'terms':([19,33,34,],[25,38,39,]),'schema_terms':([22,37,40,],[29,41,42,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program clause','program',2,'p_program','parser.py',49),
  ('program -> clause','program',1,'p_program','parser.py',50),
  ('clause -> example','clause',1,'p_clause','parser.py',57),
  ('clause -> modeb','clause',1,'p_clause','parser.py',58),
  ('clause -> modeh','clause',1,'p_clause','parser.py',59),
  ('atom -> PREDICATE LPAREN terms RPAREN','atom',4,'p_atom','parser.py',66),
  ('schema -> PREDICATE LPAREN schema_terms RPAREN','schema',4,'p_schema','parser.py',71),
  ('schema_terms -> MARKER TERM','schema_terms',2,'p_schema_terms','parser.py',75),
  ('schema_terms -> MARKER TERM COMMA schema_terms','schema_terms',4,'p_schema_terms','parser.py',76),
  ('schema_terms -> schema','schema_terms',1,'p_schema_terms','parser.py',77),
  ('schema_terms -> schema COMMA schema_terms','schema_terms',3,'p_schema_terms','parser.py',78),
  ('example -> EXAMPLE_KEY atom DOT','example',3,'p_example','parser.py',91),
  ('example -> EXAMPLE_KEY NOT atom DOT','example',4,'p_example','parser.py',92),
  ('modeh -> MODEH_KEY schema DOT','modeh',3,'p_modeh','parser.py',101),
  ('modeb -> MODEB_KEY schema DOT','modeb',3,'p_modeb','parser.py',106),
  ('modeb -> MODEB_KEY NOT schema DOT','modeb',4,'p_modeb','parser.py',107),
  ('terms -> TERM','terms',1,'p_terms','parser.py',116),
  ('terms -> atom','terms',1,'p_terms','parser.py',117),
  ('terms -> TERM COMMA terms','terms',3,'p_terms','parser.py',118),
  ('terms -> atom COMMA terms','terms',3,'p_terms','parser.py',119),
]
